// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Recipe {
    id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title String
  subTitle String?
  image String
  visibility Boolean @default(true)
}


// model User {
//   id        Int      @id @default(autoincrement())
//   phone     String?  @unique
//   email     String?  @unique
//   name      String
//   avatar    String?
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   userName  String?  @unique
//   accountType String?
//   tokens     Token[]
//   products Product[]
//   fav       Fav[]
//   posts Post[]
//   answers Answer[]
//   wonderings Wondering[]
//   userDetail UserDetail?

//   writtenReviews Review[] @relation(name:"writtenReviews")
//   receivedReviews Review[] @relation(name:"receivedReviews")
//   sales Sale[]
//   purchases Purchase[]

//   cart Cart[]
//   order Order[]
// }

// model Token {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   payload   String   @unique
//   user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
//   userId    Int

//   @@index([userId])
// }

// model Product {
//   id       Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt  
//   user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
//   userId    Int
//   image     String
//   name      String
//   price     Int 
//   description String @db.MediumText
//   preStockQuantity Int @default(0)
//   actualStockQuantity Int @default(0)
//   modelNumber String?
//   Fav         Fav[]
//   Categories  Category[]

//   sales Sale[]
//   purchases Purchase[]
//   cart Cart[]
//   orderItem OrderItem[]  //Please note that Order Can have multiple products but quantity in the
//   productImage ProductImage[]

//   @@index([userId])
// }

// model ProductImage {
//   id       Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt  
//   image  String
//   orderIndex Int @default(0)
//   product   Product     @relation(fields: [productId], references: [id], onDelete:Cascade)
//   productId    Int     

//   @@index([productId])
// }

// model UserDetail {
//   id       Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete:Cascade)
//   userId    Int     @unique
//   firstName String?
//   lastName String?
//   phone String? 
//   email String? 
//   address String?
//   city String?
//   province String?
//   postCode String?

//   @@index([userId])
//  }

// model Fav {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int

//   @@index([userId])
//   @@index([productId])
// }

// model Category {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   name      String
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int

//   @@index([productId])
// }

// model Post{
//    id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   question String @db.MediumText
//   answers Answer[]
//   wonderings Wondering[]
//   latitude Float?
//   longitude Float?
 
//   @@index([userId])

//   }

//   model Answer {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   answer String @db.MediumText
//   post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId Int

//   @@index([userId])
//   @@index([postId])
// }

// model Wondering {
// id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   post Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId Int

//   @@index([userId])
//   @@index([postId])
// }


// model Review {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   review    String @db.MediumText
//   createdBy User @relation(name:"writtenReviews", fields:[createdById], references:[id], onDelete: Cascade)
//   createdById Int
//   createdFor User @relation(name:"receivedReviews", fields: [createdForId], references:[id], onDelete: Cascade)
//   createdForId Int
//   score Int @default(1)
//   }

// //model Cart - customer adds to cart
// model Cart {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int
//   quantity  Int @default(0)

//   @@index([userId])
//   @@index([productId])
// }

// //One that I am selling as an owner
// model Sale {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int

//   @@index([userId])
//   @@index([productId])
// }
// //We need Sale - Sales ID - Products[]

// //One that customer purchases
// model Purchase {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int
//   product   Product  @relation(fields: [productId], references: [id])
//   productId Int

//   @@index([userId])
//   @@index([productId])
// }

// model Order {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   userId    Int

//   useSameAddress Boolean?

//   shippingAddress ShippingAddress?
//   billingAddress BillingAddress?
//   status    String?
//   paymentType String?
//   orderNumber String?
//   deliveryStatus String? @default("Preparing")
//   deliveryDate DateTime @default(now())
//   isShipping Boolean? @default(true)

//   orderItem OrderItem[] 

//   orderPlacedDate DateTime @default(now())
//   totalCostBeforeTax Decimal @default(0)
//   totalCostAfterTax Decimal @default(0)
//   tax Decimal @default(0)
//   shipping Decimal @default(0)

//   @@index([userId])
//   // @@index([productId])
// }

// model OrderItem {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   product   Product? @relation(fields: [productId], references: [id])
//   productId Int?
//   quantity  Int?

//   order   Order? @relation(fields: [orderId], references: [id])
//   orderId Int?

//   @@index([productId])
//   @@index([orderId])
// }

//  model ShippingAddress{
//     id       Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     firstName String?
//     lastName String?
//     address String?
//     city String?
//     province String?
//     postCode String?
//     phone String? 
//     email String?

//     order     Order     @relation(fields: [orderId], references: [id], onDelete:Cascade)
//     orderId    Int     @unique
//  }

//  model BillingAddress{
//     id       Int      @id @default(autoincrement())
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt
//     firstName String?
//     lastName String?
//     address String?
//     city String?
//     province String?
//     postCode String?
//     phone String? 

//     order     Order     @relation(fields: [orderId], references: [id], onDelete:Cascade)
//     orderId    Int     @unique
//  }